{"version":3,"sources":["webpack://gatsby-starter-default/./styles/postList.ts","webpack://gatsby-starter-default/./src/components/Post.tsx","webpack://gatsby-starter-default/./src/components/Category.tsx","webpack://gatsby-starter-default/./src/components/Preparing.tsx","webpack://gatsby-starter-default/./styles/pageLayout.ts"],"names":["postListContainer","PostContainer","PostNum","theme","css","fontColor","PostBox","PostTitle","postTitle","PostDes","PostDate","CategoryNum","PageNumsBox","PageNum","slug","title","description","date","link","themeMode","useContext","ThemeContext","themeGroup","postNum","split","num","length","to","categoryList","postData","sortedPostList","allMarkdownRemark","nodes","sort","a","b","aSlug","frontmatter","bSlug","aIndex","Number","useState","currentPage","setCurrentPage","slice","currentPosts","setCurrentPosts","handleMakePage","pageNums","Math","ceil","result","i","push","handleChangePage","el","Container","Box","Title","Description","map","undefined","key","id","Preparing","idx","style","fontWeight","onClick","indexOf","THEME","S","src","width","quality","formats","alt","placeholder","Image","TextBox","Text"],"mappings":"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","file":"ed5857d436ca25d80d7767fd805823bf322ebe2b-558efa95c2f269d0cc38.js","sourcesContent":["import { css } from \"@emotion/react\"\nimport { Theme } from \"./theme\"\n\nexport const postListContainer = css`\n  margin-top: 2rem;\n  height: 100%;\n\n  @media (max-width: 425px) {\n    width: 100%;\n    margin-top: 0rem;\n  }\n`\n\nexport const PostContainer = css`\n  display: flex;\n  width: 42rem;\n  margin-top: 3rem;\n  padding: 0 3rem 0rem 3rem;\n\n  @media (max-width: 425px) {\n    padding: 0rem;\n    width: 100%;\n    margin-top: 2.5rem;\n  }\n`\nexport const PostNum = (theme: Theme) => css`\n  font-size: 1.2rem;\n  color: ${theme.fontColor};\n`\n\nexport const PostBox = css`\n  padding-left: 1rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 5.7rem;\n  position: relative;\n`\n\nexport const PostTitle = (theme: Theme) => css`\n  text-decoration: none;\n  font-size: 1.2rem;\n  color: ${theme.postTitle};\n\n  &:hover {\n    text-decoration: underline;\n  }\n\n  @media (max-width: 425px) {\n    font-size: 1.1rem;\n  }\n`\n\nexport const PostDes = (theme: Theme) => css`\n  color: ${theme.fontColor};\n  margin-top: -0.8rem;\n\n  @media (max-width: 425px) {\n    font-size: 0.9rem;\n  }\n`\n\nexport const PostDate = (theme: Theme) => css`\n  font-size: 0.9rem;\n  color: ${theme.fontColor};\n\n  @media (max-width: 425px) {\n    font-size: 0.8rem;\n  }\n`\n\nexport const CategoryNum = () => css`\n  position: fixed;\n  bottom: 0;\n  right: 0;\n  font-size: 20rem;\n  line-height: 70%;\n  color: #f4f4f4;\n\n  @media (max-width: 1300px) {\n    display: none;\n  }\n`\n\nexport const PageNumsBox = css`\n  text-align: center;\n  margin-top: 3rem;\n`\n\nexport const PageNum = (theme:Theme) => css`\n  margin-right: 1rem;\n  cursor: pointer;\n  color: ${theme.fontColor}\n`\n","import React, { useContext } from \"react\"\nimport {\n  PostContainer,\n  PostNum,\n  PostBox,\n  PostTitle,\n  PostDate,\n  PostDes,\n} from \"../../styles/postList\"\nimport themeGroup from \"../../styles/theme\"\nimport { ThemeContext } from \"../components/ThemeContext\"\nimport { Link } from \"gatsby\"\n\ntype PostProps = {\n  slug: string\n  title: string\n  description: string\n  date: string\n  link: string\n}\n\nconst Post = ({ slug, title, description, date, link }: PostProps) => {\n  const [themeMode] = useContext(ThemeContext)\n  const theme = themeGroup[themeMode]\n  const postNum = slug.split(\"/\")[2]\n  const num = postNum[postNum.length - 1]\n\n  return (\n    <div css={PostContainer}>\n      <div css={PostNum(theme)}>{`-`}</div>\n      <div css={PostBox}>\n        <Link css={PostTitle(theme)} to={`/${link}/post-${num}`}>\n          {title}\n        </Link>\n        <div css={PostDes(theme)}>{description}</div>\n        <div css={PostDate(theme)}>작성일 : {date}</div>\n      </div>\n    </div>\n  )\n}\n\nexport default Post\n","import React, { useContext, useState } from \"react\"\nimport { Box, Container, Title, Description } from \"../../styles/pageLayout\"\nimport {\n  CategoryNum,\n  postListContainer,\n  PageNum,\n  PageNumsBox,\n} from \"../../styles/postList\"\nimport themeGroup from \"../../styles/theme\"\nimport { ThemeContext } from \"../components/ThemeContext\"\nimport Preparing from \"../components/Preparing\"\nimport Post from \"../components/Post\"\n\ntype CategoryProps = {\n  title: string\n  description: string\n  postData: any\n  link: string\n}\n\ntype frontmatterType = {\n  date: string\n  description: string\n  slug: string\n  title: string\n}\n\ntype postType = {\n  frontmatter: frontmatterType\n  html: string\n  id: string\n}\n\nconst categoryList = [\n  \"Javascript\",\n  \"React\",\n  \"React Native\",\n  \"Gatsby\",\n  \"Tech Interview\",\n]\n\nconst Category = ({ title, description, postData, link }: CategoryProps) => {\n  const [themeMode] = useContext(ThemeContext)\n  const theme = themeGroup[themeMode]\n  const postList: postType[] = postData.allMarkdownRemark.nodes\n\n  const sortedPostList = postList.sort((a, b) => {\n    const aSlug = a.frontmatter.slug.split(\"/\")[2]\n    const bSlug = b.frontmatter.slug.split(\"/\")[2]\n\n    const aIndex = Number(aSlug[aSlug.length - 1])\n    const bIndex = Number(bSlug[bSlug.length - 1])\n\n    return bIndex - aIndex\n  })\n\n  const [currentPage, setCurrentPage] = useState(1)\n  const [currentPosts, setCurrentPosts] = useState(sortedPostList.slice(0, 3))\n\n  const handleMakePage = () => {\n    let pageNums = Math.ceil(sortedPostList.length / 3)\n    let result = []\n    for (let i = 1; i <= pageNums; i++) {\n      result.push(i)\n    }\n    return result\n  }\n\n  const handleChangePage = (el: number) => {\n    let num = el * 3\n    setCurrentPage(el)\n    setCurrentPosts([\n      sortedPostList[num - 3],\n      sortedPostList[num - 2],\n      sortedPostList[num - 1],\n    ])\n  }\n\n  return (\n    <div css={Container}>\n      <div css={Box}>\n        <div css={Title(theme)}>{title}</div>\n        <div css={Description(theme)}>{description}</div>\n      </div>\n      <div css={postListContainer}>\n        {sortedPostList.length !== 0 ? (\n          currentPosts.map((el: postType) =>\n            el === undefined ? (\n              <div></div>\n            ) : (\n              <Post\n                key={el.id}\n                slug={el.frontmatter.slug}\n                title={el.frontmatter.title}\n                description={el.frontmatter.description}\n                date={el.frontmatter.date}\n                link={link}\n              ></Post>\n            )\n          )\n        ) : (\n          <Preparing />\n        )}\n        {handleMakePage().length !== 1 ? (\n          <div css={PageNumsBox}>\n            {handleMakePage().map((el, idx) =>\n              el === currentPage ? (\n                <span\n                  style={{ fontWeight: \"bold\" }}\n                  css={PageNum(theme)}\n                  key={idx + 1}\n                  onClick={() => handleChangePage(el)}\n                >\n                  {el}\n                </span>\n              ) : (\n                <span\n                  style={{ fontWeight: \"lighter\" }}\n                  css={PageNum(theme)}\n                  key={idx + 1}\n                  onClick={() => handleChangePage(el)}\n                >\n                  {el}\n                </span>\n              )\n            )}\n          </div>\n        ) : null}\n      </div>\n\n      <span css={CategoryNum}>{\"0\" + (categoryList.indexOf(title) + 1)}</span>\n    </div>\n  )\n}\n\nexport default Category\n","import { css } from \"@emotion/react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\nimport React, { useContext } from \"react\"\nimport { ThemeContext } from \"./ThemeContext\"\nimport THEME, { Theme } from \"../../styles/theme\"\n\nconst Preparing = () => {\n  const [themeMode] = useContext(ThemeContext)\n  const theme = THEME[themeMode]\n\n  return (\n    <div>\n      <StaticImage\n        src=\"../images/preparing.png\"\n        width={500}\n        quality={100}\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        alt=\"A Gatsby astronaut\"\n        placeholder=\"blurred\"\n        css={Image}\n      />\n      <div css={TextBox}>\n        <span css={Text(theme)} style={{ fontWeight: \"bold\" }}>\n          컨텐츠 준비중\n        </span>\n        <span css={Text(theme)}>입니다.</span>\n      </div>\n    </div>\n  )\n}\n\nexport default Preparing\n\nconst Image = css``\n\nconst TextBox = css`\n  text-align: center;\n  margin-top: -1.3rem;\n  width: 105%;\n`\n\nconst Text = (theme: Theme) => css`\n  font-size: 1.5rem;\n  color: ${theme.fontColor};\n`\n","import { css } from \"@emotion/react\"\nimport THEME, { Theme } from \"../styles/theme\"\n\nexport const Container = css`\n  width: 100%;\n  height: 100%;\n  align-items: center;\n  margin-top: 3rem;\n  display: flex;\n  flex-direction: column;\n\n  @media(max-width:425px) {\n    padding: 0 2rem 0 2rem;\n  }\n`\n\nexport const Box = css`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  text-decoration: none;\n  color: black;\n`\n\nexport const Title = (theme: Theme) => css`\n  font-size: 2.5rem;\n  padding-bottom: 0.5rem;\n  text-align: center;\n  color: ${theme.fontColor};\n  border-bottom: 1px solid ${theme.fontColor};\n\n  @media(max-width:425px) {\n    font-size: 2rem;\n  }\n`\n\nexport const Description = (theme: Theme) => css`\n  margin-top: 1rem;\n  color: ${theme.fontColor};\n  \n  @media(max-width:425px) {\n    font-size: 0.8rem;\n  }\n\n`\n"],"sourceRoot":""}
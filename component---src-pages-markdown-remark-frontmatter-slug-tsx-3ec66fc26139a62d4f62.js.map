{"version":3,"sources":["webpack://gatsby-starter-default/./styles/markdown.ts","webpack://gatsby-starter-default/./src/components/Utterances/index.tsx","webpack://gatsby-starter-default/./src/pages/{MarkdownRemark.frontmatter__slug}.tsx"],"names":["Container","theme","css","mdFontColor","Utterances","React","repo","containerRef","createRef","useLayoutEffect","utterances","document","createElement","attributes","src","label","crossOrigin","async","Object","entries","forEach","key","value","setAttribute","current","appendChild","ref","displayName","Template","markdownRemark","data","frontmatter","html","themeMode","useContext","ThemeContext","THEME","Layout","pageTitle","title","pageDes","description","className","date","dangerouslySetInnerHTML","__html"],"mappings":"0MAGaA,EAAY,SAACC,GAAD,OAAkBC,QAAjB,oPAoBbD,EAAME,YApBM,8FA4BZF,EAAME,YA5BM,+EAmCZF,EAAME,YAnCM,gO,8BCEnBC,EAAaC,QAAW,YAAuC,IAApCC,EAAmC,EAAnCA,KAAML,EAA6B,EAA7BA,MAC/BM,GAAeC,iBAsBrB,OApBAC,sBAAgB,WACd,IAAMC,EAAaC,SAASC,cAAc,UAEpCC,EAAa,CACjBC,IATM,gCAUNR,OACAL,QACA,aAAc,WACdc,MAAO,iBACPC,YAAa,YACbC,MAAO,QAGTC,OAAOC,QAAQN,GAAYO,SAAQ,YAAmB,IAAjBC,EAAgB,KAAXC,EAAW,KACnDZ,EAAWa,aAAaF,EAAKC,MAG/Bf,EAAaiB,QAASC,YAAYf,KACjC,CAACJ,KAEG,eAAKoB,IAAKnB,OAGnBH,EAAWuB,YAAc,aAEzB,QCXe,SAASC,EAAT,GAA4C,IACjDC,EADgD,EAAvBC,KACzBD,eACAE,EAAsBF,EAAtBE,YAAaC,EAASH,EAATG,KACdC,GAAaC,gBAAWC,KAA/B,GACMlC,EAAQmC,KAAMH,GAEpB,OACE,yBACE,QAACI,EAAA,EAAD,CAAQC,UAAWP,EAAYQ,MAAOC,QAAST,EAAYU,cACzD,mBAASvC,IAAKF,EAAUC,KACtB,eAAKyC,UAAU,aACb,eAAKA,UAAU,kBACb,cAAIA,UAAU,cAAcX,EAAYQ,QACxC,kBACEG,UAAU,YACV,aAAeX,EAAYY,KAA3B,SAECZ,EAAYY,QAGjB,eACED,UAAU,mBACVE,wBAAyB,CAAEC,OAAQb,MAErC,eAAKU,UAAU,gBACb,QAAC,EAAD,CACEpC,KAAK,gCACLL,MAAM","file":"component---src-pages-markdown-remark-frontmatter-slug-tsx-3ec66fc26139a62d4f62.js","sourcesContent":["import { css } from \"@emotion/react\"\nimport { Theme } from \"../src/theme/theme\"\n\nexport const Container = (theme: Theme) => css`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  position: relative;\n  width: 83%;\n  height: 100vh;\n\n  .post-box {\n    width: 70%;\n  }\n\n  .post-introbox {\n    display: flex;\n    justify-content: space-between;\n    border-bottom: 1px solid #e0e0e0;\n  }\n\n  .post-title {\n    margin-top: 1rem;\n    color: ${theme.mdFontColor};\n  }\n\n  .post-date {\n    display: flex;\n    align-items: flex-end;\n    margin-bottom: 1rem;\n    font-weight: normal;\n    color: ${theme.mdFontColor};\n  }\n\n  .post-description {\n    margin-top: 2rem;\n    line-height: 2rem;\n    font-size: 1.1rem;\n    color: ${theme.mdFontColor};\n  }\n\n  .comment-box {\n    margin: 3rem 0 3rem 0;\n  }\n\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n\n  @media (max-width: 425px) {\n    .post-box {\n      width: 90%;\n    }\n\n    .post-title {\n      font-size: 1.4rem;\n    }\n\n    .post-date {\n      font-size: 0.8rem;\n    }\n\n    .post-description {\n      font-size: 1rem;\n    }\n  }\n`\n","import React, { createRef, useLayoutEffect } from \"react\"\nimport { UtterancesProps } from '../../types/components'\n\nconst src = \"https://utteranc.es/client.js\"\n\nconst Utterances = React.memo(({ repo, theme }: UtterancesProps) => {\n  const containerRef = createRef<HTMLDivElement>()\n\n  useLayoutEffect(() => {\n    const utterances = document.createElement(\"script\")\n\n    const attributes = {\n      src,\n      repo,\n      theme,\n      \"issue-term\": \"pathname\",\n      label: \"✨💬 comments ✨\",\n      crossOrigin: \"anonymous\",\n      async: \"true\",\n    }\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value)\n    })\n\n    containerRef.current!.appendChild(utterances)\n  }, [repo])\n\n  return <div ref={containerRef} />\n})\n\nUtterances.displayName = \"Utterances\"\n\nexport default Utterances\n","import React, { useContext } from \"react\"\nimport { graphql } from \"gatsby\"\nimport { Container } from \"../../styles/markdown\"\nimport Layout from \"../components/Layout\"\nimport { ThemeContext } from \"../theme/ThemeContext\"\nimport THEME from \"../theme/theme\"\nimport Utterances from \"../components/Utterances\"\n\ntype templateProps = {\n  data: {\n    markdownRemark: {\n      frontmatter: {\n        date: string\n        slug: string\n        title: string\n        description: string\n      }\n      html: string\n    }\n  }\n}\n\nexport default function Template({ data }: templateProps) {\n  const { markdownRemark } = data\n  const { frontmatter, html } = markdownRemark\n  const [themeMode] = useContext(ThemeContext)\n  const theme = THEME[themeMode]\n\n  return (\n    <>\n      <Layout pageTitle={frontmatter.title} pageDes={frontmatter.description}>\n        <article css={Container(theme)}>\n          <div className=\"post-box\">\n            <div className=\"post-introbox\">\n              <h1 className=\"post-title\">{frontmatter.title}</h1>\n              <strong\n                className=\"post-date\"\n                aria-label={`${frontmatter.date} 작성됨.`}\n              >\n                {frontmatter.date}\n              </strong>\n            </div>\n            <div\n              className=\"post-description\"\n              dangerouslySetInnerHTML={{ __html: html }}\n            />\n            <div className=\"comment-box\">\n              <Utterances\n                repo=\"mooon3356/mooon3356.github.io\"\n                theme=\"github-light\"\n              ></Utterances>\n            </div>\n          </div>\n        </article>\n      </Layout>\n    </>\n  )\n}\n\nexport const pageQuery = graphql`\n  query ($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        slug\n        title\n        description\n      }\n    }\n  }\n`\n"],"sourceRoot":""}
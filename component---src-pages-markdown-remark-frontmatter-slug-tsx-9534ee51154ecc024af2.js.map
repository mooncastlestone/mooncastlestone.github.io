{"version":3,"sources":["webpack://gatsby-starter-default/./styles/post.ts","webpack://gatsby-starter-default/./src/components/Utterances.tsx","webpack://gatsby-starter-default/./src/pages/{MarkdownRemark.frontmatter__slug}.tsx"],"names":["Container","CategoryName","theme","css","categoryTitle","postBox","Title","postTitle","Description","fontColor","CommentBox","Utterances","React","repo","containerRef","createRef","useLayoutEffect","utterances","document","createElement","attributes","src","label","crossOrigin","async","Object","entries","forEach","key","value","setAttribute","current","appendChild","ref","displayName","Template","markdownRemark","data","frontmatter","html","url","slug","split","themeMode","useContext","ThemeContext","THEME","Layout","to","title","dangerouslySetInnerHTML","__html"],"mappings":"mNAGO,IAAMA,EAAS,uGAQTC,EAAe,SAACC,GAAD,OAAkBC,QAAjB,8BAElBD,EAAME,cAFW,4CASfC,EAAO,6FASPC,EAAQ,SAACJ,GAAD,OAAkBC,QAAjB,SACXD,EAAMK,UADI,oFAURC,EAAc,SAACN,GAAD,OAAkBC,QAAjB,0CAGjBD,EAAMO,UAHU,oE,8CAWdC,EAAa,qB,8BCzCpBC,EAAaC,QAAW,YAAwC,IAArCC,EAAoC,EAApCA,KAAMX,EAA8B,EAA9BA,MAC/BY,GAAeC,iBAsBrB,OApBAC,sBAAgB,WACd,IAAMC,EAAaC,SAASC,cAAc,UAEpCC,EAAa,CACjBC,IAdM,gCAeNR,OACAX,QACA,aAAc,WACdoB,MAAO,iBACPC,YAAa,YACbC,MAAO,QAGTC,OAAOC,QAAQN,GAAYO,SAAQ,YAAmB,IAAjBC,EAAgB,KAAXC,EAAW,KACnDZ,EAAWa,aAAaF,EAAKC,MAG/Bf,EAAaiB,QAASC,YAAYf,KACjC,CAACJ,KAEG,eAAKoB,IAAKnB,OAGnBH,EAAWuB,YAAc,aAEzB,QCrBe,SAASC,EAAT,GAAkC,IACvCC,EADsC,EAAbC,KACzBD,eACAE,EAAsBF,EAAtBE,YAAaC,EAASH,EAATG,KACfC,EAAMF,EAAYG,KAAKC,MAAM,KAAK,GACjCC,GAAaC,gBAAWC,KAA/B,GACM3C,EAAQ4C,KAAMH,GAEpB,OACE,yBACE,QAACI,EAAA,EAAD,MACE,eAAK5C,IAAKH,IACR,eAAKG,IAAKE,IACR,QAAC,KAAD,CAAM2C,GAAE,IAAMR,EAAOrC,IAAKF,EAAaC,IACpCsC,IAEH,cAAIrC,IAAKG,EAAMJ,IAASoC,EAAYW,QACpC,eACE9C,IAAKK,EAAYN,GACjBgD,wBAAyB,CAAEC,OAAQZ,MAErC,eAAKpC,IAAKO,IACR,QAAC,EAAD,CACEG,KAAK,gCACLX,MAAM","file":"component---src-pages-markdown-remark-frontmatter-slug-tsx-9534ee51154ecc024af2.js","sourcesContent":["import { css } from \"@emotion/react\"\nimport { Theme } from \"./theme\"\n\nexport const Container = css`\n  display: flex;\n  width: 100%;\n  height: 100vw;\n  flex-direction: column;\n  align-items: center;\n`\n\nexport const CategoryName = (theme: Theme) => css`\n  text-decoration: none;\n  color: ${theme.categoryTitle};\n\n  &: hover {\n    text-decoration: underline;\n  }\n`\n\nexport const postBox = css`\n  padding: 3rem 0 0 0;\n  width: 45%;\n\n  @media (max-width: 768px) {\n    width: 80%;\n  }\n`\n\nexport const Title = (theme: Theme) => css`\n  color: ${theme.postTitle};\n  margin-top: 1rem;\n  font-size: 3rem;\n\n  @media (max-width: 425px) {\n    font-size: 1.8rem;\n  }\n`\n\nexport const Description = (theme: Theme) => css`\n  font-size: 1.1rem;\n  margin-top: 2rem;\n  color: ${theme.fontColor};\n  line-height: 2rem;\n\n  @media (max-width: 425px) {\n    font-size: 1rem;\n  }\n`\n\nexport const CommentBox = () => css`\nmargin-bottom: 3rem;\n`\n\n","import React, { createRef, useLayoutEffect } from \"react\"\n\nconst src = \"https://utteranc.es/client.js\"\n\ntype IUtterancesProps = {\n  repo: string\n  theme: string\n}\n\nconst Utterances = React.memo(({ repo, theme }: IUtterancesProps) => {\n  const containerRef = createRef<HTMLDivElement>()\n\n  useLayoutEffect(() => {\n    const utterances = document.createElement(\"script\")\n\n    const attributes = {\n      src,\n      repo,\n      theme,\n      \"issue-term\": \"pathname\",\n      label: \"âœ¨ðŸ’¬ comments âœ¨\",\n      crossOrigin: \"anonymous\",\n      async: \"true\",\n    }\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value)\n    })\n\n    containerRef.current!.appendChild(utterances)\n  }, [repo])\n\n  return <div ref={containerRef} />\n})\n\nUtterances.displayName = \"Utterances\"\n\nexport default Utterances\n","import React, { useContext } from \"react\"\nimport { graphql } from \"gatsby\"\nimport { Link } from \"gatsby\"\nimport {\n  Container,\n  CategoryName,\n  postBox,\n  Description,\n  Title,\n  CommentBox,\n} from \"../../styles/post\"\nimport Layout from \"../components/Layout\"\nimport { ThemeContext } from \"../components/ThemeContext\"\nimport THEME from \"../../styles/theme\"\nimport Utterances from \"../components/Utterances\"\n\nexport default function Template({ data }: any) {\n  const { markdownRemark } = data\n  const { frontmatter, html } = markdownRemark\n  const url = frontmatter.slug.split(\"/\")[1]\n  const [themeMode] = useContext(ThemeContext)\n  const theme = THEME[themeMode]\n\n  return (\n    <>\n      <Layout>\n        <div css={Container}>\n          <div css={postBox}>\n            <Link to={`/${url}`} css={CategoryName(theme)}>\n              {url}\n            </Link>\n            <h1 css={Title(theme)}>{frontmatter.title}</h1>\n            <div\n              css={Description(theme)}\n              dangerouslySetInnerHTML={{ __html: html }}\n            />\n            <div css={CommentBox}>\n              <Utterances\n                repo=\"mooon3356/mooon3356.github.io\"\n                theme=\"github-light\"\n              ></Utterances>\n            </div>\n          </div>\n        </div>\n      </Layout>\n    </>\n  )\n}\n\nexport const pageQuery = graphql`\n  query ($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        slug\n        title\n      }\n    }\n  }\n`\n"],"sourceRoot":""}
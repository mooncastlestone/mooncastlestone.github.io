{"version":3,"sources":["webpack://gatsby-starter-default/./styles/postList.ts","webpack://gatsby-starter-default/./src/components/Post.tsx","webpack://gatsby-starter-default/./src/components/Category.tsx","webpack://gatsby-starter-default/./src/components/Preparing.tsx","webpack://gatsby-starter-default/./styles/pageLayout.ts"],"names":["postListContainer","PostContainer","PostNum","theme","css","fontColor","PostBox","PostTitle","postTitle","PostDes","PostDate","PageNum","slug","title","description","date","link","themeMode","useContext","ThemeContext","themeGroup","postNum","split","num","length","to","categoryList","postData","sortedPostList","allMarkdownRemark","nodes","sort","a","b","aSlug","frontmatter","bSlug","aIndex","Number","Container","Box","Title","Description","map","el","idx","key","id","Preparing","indexOf","THEME","S","src","width","quality","formats","alt","placeholder","Image","TextBox","Text","style","fontWeight"],"mappings":"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","file":"ed5857d436ca25d80d7767fd805823bf322ebe2b-2da61fae3b41c1a906b3.js","sourcesContent":["import { css } from \"@emotion/react\"\nimport { Theme } from \"./theme\"\n\nexport const postListContainer = css`\n  margin-top: 2rem;\n  height: 100%;\n\n  @media (max-width: 420px) {\n    width: 100%;\n    margin-top: 0rem;\n  }\n`\n\nexport const PostContainer = css`\n  display: flex;\n  width: 42rem;\n  margin-top: 3rem;\n  padding: 0 3rem 0rem 3rem;\n\n  @media (max-width: 420px) {\n    padding: 0rem;\n    width: 100%;\n    margin-top: 2.5rem;\n  }\n`\nexport const PostNum = (theme: Theme) => css`\n  font-size: 1.2rem;\n  color: ${theme.fontColor};\n`\n\nexport const PostBox = css`\n  padding-left: 1rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 6.5rem;\n`\n\nexport const PostTitle = (theme: Theme) => css`\n  text-decoration: none;\n  font-size: 1.2rem;\n  color: ${theme.postTitle};\n\n  &:hover {\n    text-decoration: underline;\n  }\n\n  @media (max-width: 420px) {\n    font-size: 1.1rem;\n  }\n`\n\nexport const PostDes = (theme: Theme) => css`\n  color: ${theme.fontColor};\n  margin-top: -0.5rem;\n\n  @media (max-width: 420px) {\n    font-size: 0.9rem;\n  }\n`\n\nexport const PostDate = (theme: Theme) => css`\n  font-size: 0.9rem;\n  color: ${theme.fontColor};\n\n  @media (max-width: 420px) {\n    font-size: 0.8rem;\n  }\n`\n\nexport const PageNum = () => css`\n  position: fixed;\n  bottom: 0;\n  right: 0;\n  font-size: 20rem;\n  line-height: 70%;\n  color: #f4f4f4;\n\n  @media (max-width: 1300px) {\n    display: none;\n  }\n`\n\n","import React, { useContext } from \"react\"\nimport {\n  PostContainer,\n  PostNum,\n  PostBox,\n  PostTitle,\n  PostDate,\n  PostDes,\n} from \"../../styles/postList\"\nimport themeGroup from \"../../styles/theme\"\nimport { ThemeContext } from \"../components/ThemeContext\"\nimport { Link } from \"gatsby\"\n\ntype PostProps = {\n  slug: string\n  title: string\n  description: string\n  date: string\n  link: string\n}\n\nconst Post = ({ slug, title, description, date, link }: PostProps) => {\n  const [themeMode] = useContext(ThemeContext)\n  const theme = themeGroup[themeMode]\n  const postNum = slug.split(\"/\")[2]\n  const num = postNum[postNum.length - 1]\n\n  return (\n    <div css={PostContainer}>\n      <div css={PostNum(theme)}>{`-`}</div>\n      <div css={PostBox}>\n        <Link css={PostTitle(theme)} to={`/${link}/post-${num}`}>\n          {title}\n        </Link>\n        <div css={PostDes(theme)}>{description}</div>\n        <div css={PostDate(theme)}>작성일 : {date}</div>\n      </div>\n    </div>\n  )\n}\n\nexport default Post\n","import React, { useContext } from \"react\"\nimport { Box, Container, Title, Description } from \"../../styles/pageLayout\"\nimport { PageNum, postListContainer } from \"../../styles/postList\"\nimport themeGroup from \"../../styles/theme\"\nimport { ThemeContext } from \"../components/ThemeContext\"\nimport Preparing from \"../components/Preparing\"\nimport Post from \"../components/Post\"\n\ntype CategoryProps = {\n  title: string\n  description: string\n  postData: any\n  link: string\n}\n\ntype frontmatterType = {\n  date: string\n  description: string\n  slug: string\n  title: string\n}\n\ntype postType = {\n  frontmatter: frontmatterType\n  html: string\n  id: string\n}\n\nconst categoryList = [\n  \"Javascript\",\n  \"React\",\n  \"React Native\",\n  \"Gatsby\",\n  \"Tech Interview\",\n]\n\nconst Category = ({ title, description, postData, link }: CategoryProps) => {\n  const [themeMode] = useContext(ThemeContext)\n  const theme = themeGroup[themeMode]\n  const postList: postType[] = postData.allMarkdownRemark.nodes\n\n  const sortedPostList = postList.sort((a, b) => {\n    const aSlug = a.frontmatter.slug.split(\"/\")[2]\n    const bSlug = b.frontmatter.slug.split(\"/\")[2]\n\n    const aIndex = Number(aSlug[aSlug.length - 1])\n    const bIndex = Number(bSlug[bSlug.length - 1])\n\n    return bIndex - aIndex\n  })\n\n  return (\n    <div css={Container}>\n      <div css={Box}>\n        <div css={Title(theme)}>{title}</div>\n        <div css={Description(theme)}>{description}</div>\n      </div>\n      <div css={postListContainer}>\n        {sortedPostList.length !== 0 ? (\n          sortedPostList.map((el: postType, idx: number) => (\n            <Post\n              key={el.id}\n              slug={el.frontmatter.slug}\n              title={el.frontmatter.title}\n              description={el.frontmatter.description}\n              date={el.frontmatter.date}\n              link={link}\n            ></Post>\n          ))\n        ) : (\n          <Preparing />\n        )}\n      </div>\n\n      <span css={PageNum}>{\"0\" + (categoryList.indexOf(title) + 1)}</span>\n    </div>\n  )\n}\n\nexport default Category\n","import { css } from \"@emotion/react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\nimport React, { useContext } from \"react\"\nimport { ThemeContext } from \"./ThemeContext\"\nimport THEME, { Theme } from \"../../styles/theme\"\n\nconst Preparing = () => {\n  const [themeMode] = useContext(ThemeContext)\n  const theme = THEME[themeMode]\n\n  return (\n    <div>\n      <StaticImage\n        src=\"../images/preparing.png\"\n        width={500}\n        quality={100}\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        alt=\"A Gatsby astronaut\"\n        placeholder=\"blurred\"\n        css={Image}\n      />\n      <div css={TextBox}>\n        <span css={Text(theme)} style={{ fontWeight: \"bold\" }}>\n          컨텐츠 준비중\n        </span>\n        <span css={Text(theme)}>입니다.</span>\n      </div>\n    </div>\n  )\n}\n\nexport default Preparing\n\nconst Image = css``\n\nconst TextBox = css`\n  text-align: center;\n  margin-top: -1.3rem;\n  width: 105%;\n`\n\nconst Text = (theme: Theme) => css`\n  font-size: 1.5rem;\n  color: ${theme.fontColor};\n`\n","import { css } from \"@emotion/react\"\nimport THEME, { Theme } from \"../styles/theme\"\n\nexport const Container = css`\n  width: 100%;\n  height: 100%;\n  align-items: center;\n  margin-top: 3rem;\n  display: flex;\n  flex-direction: column;\n\n  @media(max-width:420px) {\n    padding: 0 2rem 0 2rem;\n  }\n`\n\nexport const Box = css`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  text-decoration: none;\n  color: black;\n`\n\nexport const Title = (theme: Theme) => css`\n  font-size: 2.5rem;\n  padding-bottom: 0.5rem;\n  text-align: center;\n  color: ${theme.fontColor};\n  border-bottom: 1px solid ${theme.fontColor};\n\n  @media(max-width:420px) {\n    font-size: 2rem;\n  }\n`\n\nexport const Description = (theme: Theme) => css`\n  margin-top: 1rem;\n  color: ${theme.fontColor};\n  \n  @media(max-width:420px) {\n    font-size: 0.8rem;\n  }\n\n`\n"],"sourceRoot":""}
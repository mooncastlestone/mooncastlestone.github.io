{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/javascript/post-2/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"callback이란\" style=\"position:relative;\"><a href=\"#callback%EC%9D%B4%EB%9E%80\" aria-label=\"callback이란 permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Callback이란?</h2>\n<p>프로그래밍에서 콜백은 다른 코드의 인수로 넘겨주는 실행 가능한 코드를 말한다.</p>\n<h3 id=\"callback은-언제-사용이-되고-어떻게-사용되는가\" style=\"position:relative;\"><a href=\"#callback%EC%9D%80-%EC%96%B8%EC%A0%9C-%EC%82%AC%EC%9A%A9%EC%9D%B4-%EB%90%98%EA%B3%A0-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94%EA%B0%80\" aria-label=\"callback은 언제 사용이 되고 어떻게 사용되는가 permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>callback은 언제 사용이 되고 어떻게 사용되는가?</h3>\n<p>임의의 시간이 지난 후, 인자값으로 받은 string을 호출하는 함수를 작성한다고 가정해보자.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"javascript\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk3\">printString</span><span class=\"mtk1\">(</span><span class=\"mtk4 mtki\">string</span><span class=\"mtk1\">){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk8\">setTimeout</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    () </span><span class=\"mtk10\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">console</span><span class=\"mtk1\">.</span><span class=\"mtk3\">log</span><span class=\"mtk1\">(</span><span class=\"mtk4\">string</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">Math</span><span class=\"mtk1\">.</span><span class=\"mtk8\">floor</span><span class=\"mtk1\">(</span><span class=\"mtk11\">Math</span><span class=\"mtk1\">.</span><span class=\"mtk8\">random</span><span class=\"mtk1\">() </span><span class=\"mtk8\">*</span><span class=\"mtk1\"> </span><span class=\"mtk7\">100</span><span class=\"mtk1\">) </span><span class=\"mtk8\">+</span><span class=\"mtk1\"> </span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>A, B, C를 인자값으로 실행시켜보자</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"javascript\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk3\">printAll</span><span class=\"mtk1\">(){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">printString</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;A&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">printString</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;B&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">printString</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;C&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">printAll</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span></code></pre>\n<p>아마 아래와 같이 printAll 함수를 실행시킬 때마다 랜덤으로 A, B, C가 출력이 되는 것을 확인할 수 있을 것이다. 이는 이러한 기능들이 비동기식으로 진행이 되기 때문이다. 함수들은 순서대로 실행되지만 각각의 함수들이 끝날 때까지 기다리지 않고 함수를 실행시킨다. 개발자가 작성한 흐름대로 코드를 실행시키기 위해 callback 함수를 사용하여 처리할 수 있다.</p>\n<p><img src=\"https://images.velog.io/images/moon3356/post/afc3ad27-6442-4d03-840c-dc486d421710/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-08-19%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%206.53.44.png\" alt=\"\"></p>\n<p>콜백을 사용한다면, 아래와 같이 작성할 수 있다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"javascript\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk3\">printString</span><span class=\"mtk1\">(</span><span class=\"mtk4 mtki\">string</span><span class=\"mtk1\">, </span><span class=\"mtk4 mtki\">callback</span><span class=\"mtk1\">){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk8\">setTimeout</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    () </span><span class=\"mtk10\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">console</span><span class=\"mtk1\">.</span><span class=\"mtk3\">log</span><span class=\"mtk1\">(</span><span class=\"mtk4\">string</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3\">callback</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">Math</span><span class=\"mtk1\">.</span><span class=\"mtk8\">floor</span><span class=\"mtk1\">(</span><span class=\"mtk11\">Math</span><span class=\"mtk1\">.</span><span class=\"mtk8\">random</span><span class=\"mtk1\">() </span><span class=\"mtk8\">*</span><span class=\"mtk1\"> </span><span class=\"mtk7\">100</span><span class=\"mtk1\">) </span><span class=\"mtk8\">+</span><span class=\"mtk1\"> </span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>callback 함수를 원하는 시점에 실행시켜 첫 번째 함수 호출이 끝나면, 두 번째 함수를 실행시킬 수 있다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"javascript\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk3\">printAll</span><span class=\"mtk1\">(){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">printString</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;A&quot;</span><span class=\"mtk1\">, () </span><span class=\"mtk10\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">printString</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;B&quot;</span><span class=\"mtk1\">, () </span><span class=\"mtk10\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3\">printString</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;C&quot;</span><span class=\"mtk1\">, () </span><span class=\"mtk10\">=&gt;</span><span class=\"mtk1\"> {})</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">printAll</span><span class=\"mtk1\">()</span></span></span></code></pre>\n<p>위와 같이 콜백 함수를 이용하여 코드를 작성한다면 문자열 A 호출이 끝나면, B 호출이 되는 것을 확인할 수 있을 것이다.</p>\n<p>그런데 이런 콜백으로 비동기 처리를 하는 것에 문제점이 하나 있는데, 바로 *<strong>콜백 헬</strong>을 만들어 낸다는 것이다.\n<br></br></p>\n<p>*<strong>콜백 헬이란?</strong></p>\n<p>함수 내부에서 함수를 중첩으로 선언하다보면, 코드의 가독성이 매우 떨어지게 된다. 콜백 함수를 사용하여 비동기 처리를 할 때, 콜백 함수 중첩이 계속 이루어지게 되는데 이것을 콜백 헬이라고 한다.</p>\n<p>이 콜백 헬 문제를 해결하기 위해서 등장한 것이 <strong>Promise</strong>이다.</p>\n<h2 id=\"promise\" style=\"position:relative;\"><a href=\"#promise\" aria-label=\"promise permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise</h2>\n<p>프로미스는 콜백함수의 단점을 보완하기 위해 등장하게 된 비동기 처리를 위한 객체이다.</p>\n<h3 id=\"프로미스의-3가지-상태\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EB%AF%B8%EC%8A%A4%EC%9D%98-3%EA%B0%80%EC%A7%80-%EC%83%81%ED%83%9C\" aria-label=\"프로미스의 3가지 상태 permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로미스의 3가지 상태</h3>\n<p>프로미스를 사용할 때 알아야 하는 가장 기본적인 개념이다. 여기서 상태가 의미하는 것은 프로미스의 처리 과정을 의미한다. new Promise로 프로미스를 생성하고 작업이 종료될 때까지 총 3가지 상태를 갖는다.\n<br></br>\n<strong>pending(대기)</strong>\n비동기 처리 로직이 아직 완료되지 않은 상태를 의미한다.</p>\n<p><strong>Fulfilled(이행)</strong>\n비동기 처리가 완료되어 프로미스가 결과 값을 반환해준 상태</p>\n<p><strong>Rejected(실패)</strong>\n비동기 처리가 실패하거나 오류가 발생한 상태</p>\n<p>프로미스 메소드를 호출하면 대기 상태가 되고, 호출 결과에 따라서 이행 또는 실패 상태로 된다.</p>\n<h3 id=\"응답-처리\" style=\"position:relative;\"><a href=\"#%EC%9D%91%EB%8B%B5-%EC%B2%98%EB%A6%AC\" aria-label=\"응답 처리 permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>응답 처리</h3>\n<p>프로미스 메서드를 호출할 때, 콜백 함수를 선언할 수 있는데, 콜백 함수의 인자로는 resolve와 reject를 사용할 수 있다.</p>\n<h3 id=\"resolve\" style=\"position:relative;\"><a href=\"#resolve\" aria-label=\"resolve permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>resolve</h3>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"javascript\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk3\">getData</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk10\">return</span><span class=\"mtk1\"> </span><span class=\"mtk10\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Promise</span><span class=\"mtk1\">(</span><span class=\"mtk10\">function</span><span class=\"mtk1\">(</span><span class=\"mtk4 mtki\">resolve</span><span class=\"mtk1\">, </span><span class=\"mtk4 mtki\">reject</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">var</span><span class=\"mtk1\"> </span><span class=\"mtk4\">data</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk7\">1000</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">resolve</span><span class=\"mtk1\">(</span><span class=\"mtk4\">data</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">getData</span><span class=\"mtk1\">().</span><span class=\"mtk3\">then</span><span class=\"mtk1\">(</span><span class=\"mtk10\">function</span><span class=\"mtk1\">(</span><span class=\"mtk4 mtki\">data</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">console</span><span class=\"mtk1\">.</span><span class=\"mtk3\">log</span><span class=\"mtk1\">(</span><span class=\"mtk4\">data</span><span class=\"mtk1\">) </span><span class=\"mtk5 mtki\">// 1000</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">})</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">getData</span><span class=\"mtk1\"> </span><span class=\"mtk4\">함수에서</span><span class=\"mtk1\"> </span><span class=\"mtk4\">생성한</span><span class=\"mtk1\"> </span><span class=\"mtk10\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Promise에서</span><span class=\"mtk1\"> </span><span class=\"mtk11\">요청이</span><span class=\"mtk1\"> </span><span class=\"mtk11\">처리</span><span class=\"mtk1\"> </span><span class=\"mtk11\">완료</span><span class=\"mtk1\"> </span><span class=\"mtk11\">되어서</span><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">resolve</span><span class=\"mtk1\"> </span><span class=\"mtk4\">콜백</span><span class=\"mtk1\"> </span><span class=\"mtk4\">함수로</span><span class=\"mtk1\"> </span><span class=\"mtk4\">데이터가</span><span class=\"mtk1\"> </span><span class=\"mtk4\">들어간다</span><span class=\"mtk1\">.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">resolve에</span><span class=\"mtk1\"> </span><span class=\"mtk4\">할당된</span><span class=\"mtk1\"> </span><span class=\"mtk4\">결과값을</span><span class=\"mtk1\"> </span><span class=\"mtk4\">then</span><span class=\"mtk1\"> </span><span class=\"mtk4\">메소드를</span><span class=\"mtk1\"> </span><span class=\"mtk4\">사용해서</span><span class=\"mtk1\"> </span><span class=\"mtk4\">사용</span><span class=\"mtk1\"> </span><span class=\"mtk4\">가능하다</span><span class=\"mtk1\">.</span></span></span></code></pre>\n<h3 id=\"rejected\" style=\"position:relative;\"><a href=\"#rejected\" aria-label=\"rejected permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>rejected</h3>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"javascript\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk3\">getData</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk10\">return</span><span class=\"mtk1\"> </span><span class=\"mtk10\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Promise</span><span class=\"mtk1\">(</span><span class=\"mtk10\">function</span><span class=\"mtk1\">(</span><span class=\"mtk4 mtki\">resolve</span><span class=\"mtk1\">, </span><span class=\"mtk4 mtki\">reject</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">reject</span><span class=\"mtk1\">(</span><span class=\"mtk10\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Error</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;Request is failed&quot;</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">getData</span><span class=\"mtk1\">().</span><span class=\"mtk3\">then</span><span class=\"mtk1\">().</span><span class=\"mtk3\">catch</span><span class=\"mtk1\">(</span><span class=\"mtk10\">function</span><span class=\"mtk1\">(</span><span class=\"mtk4 mtki\">err</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">console</span><span class=\"mtk1\">.</span><span class=\"mtk3\">log</span><span class=\"mtk1\">(</span><span class=\"mtk4\">err</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">});</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">getData</span><span class=\"mtk1\"> </span><span class=\"mtk4\">함수에서</span><span class=\"mtk1\"> </span><span class=\"mtk4\">생성한</span><span class=\"mtk1\"> </span><span class=\"mtk10\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Promise에서</span><span class=\"mtk1\"> </span><span class=\"mtk11\">요청이</span><span class=\"mtk1\"> </span><span class=\"mtk11\">거절된다면</span><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">reject</span><span class=\"mtk1\"> </span><span class=\"mtk4\">콜백</span><span class=\"mtk1\"> </span><span class=\"mtk4\">함수로</span><span class=\"mtk1\"> </span><span class=\"mtk4\">실패</span><span class=\"mtk1\"> </span><span class=\"mtk4\">처리의</span><span class=\"mtk1\"> </span><span class=\"mtk4\">결과값을</span><span class=\"mtk1\"> </span><span class=\"mtk10\">catch</span><span class=\"mtk1\">()</span><span class=\"mtk4\">로</span><span class=\"mtk1\"> </span><span class=\"mtk4\">받을</span><span class=\"mtk1\"> </span><span class=\"mtk4\">수</span><span class=\"mtk1\"> </span><span class=\"mtk4\">있다</span><span class=\"mtk1\">.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span></code></pre>\n<h2 id=\"promise-chaining\" style=\"position:relative;\"><a href=\"#promise-chaining\" aria-label=\"promise chaining permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise Chaining</h2>\n<p>프로미스의 특징 중 하나로 여러 개의 프로미스를 연결하여 사용할 수 있다는 특징이 있다. then 메소드를 사용하면 새로운 프로미스 객체를 반환한다. promise 객체가 이행 상태가 되어 resolve를 사용하고 데이터를 받아왔을 때, then 메소드를 사용하여 여러 단계에 걸쳐 데이터를 가공할 수 있다.</p>\n<p>아까 콜백 함수의 단점으로 콜백에 빠질 수 있다고 했었는데, Promise에서도 이 체이닝이 길어지게 된다면, Promise hell에 빠질 수 있는 위험이 있다.</p>\n<p>이것을 위해 새롭게 비동기 처리를 위해 등장한 것이 Async Await이다.</p>\n<h2 id=\"async--await\" style=\"position:relative;\"><a href=\"#async--await\" aria-label=\"async  await permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>async &#x26; await</h2>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"javascript\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">async</span><span class=\"mtk1\"> </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk3\">함수명</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk10\">await</span><span class=\"mtk1\"> </span><span class=\"mtk3\">비동기_처리_메서드_명</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span></code></pre>\n<p>위와 같이 비동기 작업이 필요한 메소드가 포함된 함수 앞에 async를 붙인다. 그리고 HTTP 통신을 하는 비동기 처리 코드 앞에 await을 붙인다.</p>\n<p>async로 비동기 작업을 할 때 가장 중요한 것은 await을 붙인 메소드가 반드시 프로미스 객체를 반환해야 제대로 작동이 된다.</p>\n<p>async await을 사용하면 기존의 비동기 처리 코드 방식으로 사고하지 않아도 코드를 위에서부터 차례대로 이해할 수 있는 장점이 있다.</p>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>면접 준비하면서 비동기 처리하는 과정에 대한 개념이 많이 부족하다는 생각이 들었다. 면접에서 잘 이야기할 수 있도록 더 정리를 해야될 것 같다.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .one-dark-pro {\n    background-color: #282c34;\n    color: #abb2bf;\n  }\n  .one-dark-pro .mtki { font-style: italic; }\n  .one-dark-pro .mtk10 { color: #C678DD; }\n  .one-dark-pro .mtk1 { color: #ABB2BF; }\n  .one-dark-pro .mtk3 { color: #61AFEF; }\n  .one-dark-pro .mtk4 { color: #E06C75; }\n  .one-dark-pro .mtk8 { color: #56B6C2; }\n  .one-dark-pro .mtk11 { color: #E5C07B; }\n  .one-dark-pro .mtk7 { color: #D19A66; }\n  .one-dark-pro .mtk6 { color: #98C379; }\n  .one-dark-pro .mtk5 { color: #7F848E; }\n  .one-dark-pro .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","frontmatter":{"date":"September 04, 2021","slug":"/javascript/post-2/","title":"Callback, Promise 그리고 Async Await","description":"Callback, Promise 그리고 Async Await의 차이점에 대해 정리하였습니다."}}},"pageContext":{"id":"f436a16a-b76d-53d7-b7c3-d6504187092e","frontmatter__slug":"/javascript/post-2/","__params":{"frontmatter__slug":"javascript"}}},"staticQueryHashes":["2642852360","2842829498"]}
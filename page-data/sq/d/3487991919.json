{"data":{"allMarkdownRemark":{"nodes":[{"id":"5c5780c6-c431-5ba8-b2cc-c1cc5cdea520","frontmatter":{"title":"useState 내부 구조 탐색","date":"2021-09-15","slug":"/react/post-2/","description":"useState의 내부 구조를 탐색하여 정리하였습니다."},"html":"<p>React hooks에서 대표적으로 많이 사용하는 상태 관리를 위한 useState.\n리액트로 개발을 진행하면서 많이 사용하고 있는데, 내부적으로 어떤 식으로 상태와 상태를 변경하는 함수를 받아오고 있는지 궁금해서 확인해보고자 한다.</p>\n<h2 id=\"usestate의-내부-구조\" style=\"position:relative;\"><a href=\"#usestate%EC%9D%98-%EB%82%B4%EB%B6%80-%EA%B5%AC%EC%A1%B0\" aria-label=\"usestate의 내부 구조 permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useState의 내부 구조</h2>\n<p>React hooks 중 상태를 관리할 수 있는 useState를 사용하면 구조 분해 할당을 사용하여 아래와 같이 상태 값과 상태를 변경할 수 있는 함수를 받아올 수 있다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"javascript\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">const</span><span class=\"mtk1\"> [ </span><span class=\"mtk11\">state</span><span class=\"mtk1\">, </span><span class=\"mtk11\">setState</span><span class=\"mtk1\"> ] </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk3\">useState</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&#39;test&#39;</span><span class=\"mtk1\">)           </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span></code></pre>\n<p>이 state와 setState는 어떤 식으로 useState를 통해서 받아와지게 되는 걸까? useState가 선언되어있는 react 모듈을 탐색해보자!</p>\n<p><img src=\"https://images.velog.io/images/moon3356/post/c89a9eed-9c2f-420f-8c7a-38fe115a4c2f/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-09-02%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%209.35.05.png\" alt=\"\"></p>\n<p>node_modules > react > cjs > react.development.js에서 위와 같이 useState가 선언되어져 있는 것을 확인할 수 있다. 개발자가 useState를 실행하면 변수 dispatcher를 선언하고 resolveDispatcher 외부 함수를 실행하여 값을 할당받는다. 그리고 변수에 할당된 내부 useState 메소드를 실행한다. 여기서 return 되는 것들이 상태와 상태를 관리하는 함수인 것인데, resolveDispatcher 함수는 어떤 값을 dispatcher 변수에 할당한 것일까? resolveDispatcher를 탐색해보자.</p>\n<p><img src=\"https://images.velog.io/images/moon3356/post/1f2ed632-b77c-4d76-a931-b23ee4d753ee/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-09-02%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%209.38.17.png\" alt=\"\"></p>\n<p>resolveDispatcher 함수를 실행하면 다시 변수 dispatcher를 선언하고 외부에 선언된 ReactCurrentDispatcher 객체의 current를 할당 받는다. 그리고 에러 처리를 진행하고 선언한 변수 dispatcher를 리턴한다. 그렇다면 이번엔 ReactCurrentDispatcher.current는 어떤 값을 dispatcher 변수에 할당한 것일까? 이번에야말로 우리가 원하는 state와 setState를 반환받는 것일까? 다시 한번 탐색해보자..</p>\n<p><img src=\"https://images.velog.io/images/moon3356/post/6fb990b6-0399-4ba2-bcf1-93bde0264ce2/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-09-02%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%209.42.17.png\" alt=\"\"></p>\n<p>음..... 없다. 그냥 전역으로 선언된 객체 하나만 있다. 이 객체의 current는 null만을 가지고 있다. 그렇다면 내가 찾고 있는 state와 useState는 또 다른 외부 함수, 변수로부터 받아오는 것일까?</p>\n<p>또다시 ReactCurrentDispatcher가 사용되는 곳을 찾기 위해 탐색을 하다가 아래와 같은 객체를 발견할 수 있었다.</p>\n<p><img src=\"https://images.velog.io/images/moon3356/post/885be1d3-1097-4175-b137-5834f968adb2/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-09-02%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%209.49.58.png\" alt=\"\"></p>\n<p>이 ReactSharedInternals 객체에 ReactCurrentDispatcher가 할당이 되어서 활용이 되는 듯 하다. 여기서 더 탐색하다가는 React 관련 코드들을 모조리 뜯어보게 될 것 같아 잠시 멈췄다..</p>\n<p>일단은 ReactCurrentDispatcher.current에 내가 선언한 state와 useState가 일련의 과정을 거친 후에 할당된다고 생각하면 될 것 같다.</p>\n<h2 id=\"중간-정리\" style=\"position:relative;\"><a href=\"#%EC%A4%91%EA%B0%84-%EC%A0%95%EB%A6%AC\" aria-label=\"중간 정리 permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중간 정리</h2>\n<p>useState를 사용할 때마다 내부 변수 dispatcher를 생성하고 전역으로 선언된 객체로부터 state와 setState를 반환받는다.</p>\n<h2 id=\"usestate와-closure의-관계성\" style=\"position:relative;\"><a href=\"#usestate%EC%99%80-closure%EC%9D%98-%EA%B4%80%EA%B3%84%EC%84%B1\" aria-label=\"usestate와 closure의 관계성 permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useState와 Closure의 관계성</h2>\n<p>위에서 살펴보았듯이 useState를 실행하면 dispatcher 내부 변수를 선언하고 외부에 선언된 변수 ReactCurrentDispatcher로부터 state와 setState를 가져온다. 즉, 내부 함수의 변수가 외부 함수의 변수에 접근한다는 것인데, 여기서 우리는  useState가 <strong>Closure</strong> 매커니즘으로 동작이 되는 것을 확인할 수 있다.</p>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>평소 그저 사용하기만 하던 하나의 react hook에 정말 많은 코드들이 상호 작용하면서 동작하고 있는 것을 보니, 더 많은 공부를 해야겠다는 생각이 든다...! 더 열심히 하자!!</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .one-dark-pro {\n    background-color: #282c34;\n    color: #abb2bf;\n  }\n  .one-dark-pro .mtk10 { color: #C678DD; }\n  .one-dark-pro .mtk1 { color: #ABB2BF; }\n  .one-dark-pro .mtk11 { color: #E5C07B; }\n  .one-dark-pro .mtk8 { color: #56B6C2; }\n  .one-dark-pro .mtk3 { color: #61AFEF; }\n  .one-dark-pro .mtk6 { color: #98C379; }\n  .one-dark-pro .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>"},{"id":"4e450299-2eb6-5f75-94a8-44fbfa3164c0","frontmatter":{"title":"Redux 정리","date":"2021-09-01","slug":"/react/post-1/","description":"Redux에 대해서 정리하였습니다."},"html":"<h2 id=\"redux란\" style=\"position:relative;\"><a href=\"#redux%EB%9E%80\" aria-label=\"redux란 permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux란?</h2>\n<p>Redux는 가장 많이 사용되는 <strong>상태 관리 라이브러리</strong>이다.</p>\n<p>리덕스를 사용하면 생성하게 될 컴포넌트들의 상태 관련 로직들을 다른 파일들로 분리시켜서 더욱 효율적으로 관리할 수 있으며 글로벌 상태 관리도 손쉽게 할 수 있는 장점이 있다.</p>\n<h2 id=\"redux-데이터-흐름\" style=\"position:relative;\"><a href=\"#redux-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%9D%90%EB%A6%84\" aria-label=\"redux 데이터 흐름 permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux 데이터 흐름</h2>\n<p>Redux는 기존에 있던 데이터 흐름을 관리하는 방식인 MVC 패턴이 아닌, <strong>Flux 디자인 패턴 구조</strong>를 가지고 있다. MVC와 Flux는 어떤 차이점을 가지고 있을까?</p>\n<p>우선 MVC에 대해서 먼저 알아보자.</p>\n<h3 id=\"1-mvc란\" style=\"position:relative;\"><a href=\"#1-mvc%EB%9E%80\" aria-label=\"1 mvc란 permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. MVC란?</h3>\n<p><strong>Model-View-Controller</strong>의 약자이며, 웹사이트를 개발할 때 <strong>3가지 형태</strong>로 역할을 나누어 개발하는 소프트웨어 디자인 패턴이다.</p>\n<ul>\n<li><strong>Model</strong> : 어플리케이션에 필요한 데이터의 형식이나 구조를 관리한다.</li>\n<li><strong>View</strong> : 사용자에게 보여지는 모든 부분을 담당한다.</li>\n<li><strong>Controller</strong> : 변화하는 데이터를 관리한다.</li>\n</ul>\n<p>작동되는 흐름은 아래와 같다.</p>\n<p><img src=\"https://images.velog.io/images/moon3356/post/08bcdcd3-4f79-441f-8ae4-2c1bbb8cac1b/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-08-26%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%201.56.24.png\" alt=\"\"></p>\n<p>이 MVC 패턴의 큰 특징 중 하나는 <strong>'양방향 데이터 흐름'</strong> 이다. 모델이 변경되면 뷰 또한 변하고, 뷰에서 변경이 일어나면, 모델 또한 변한다.</p>\n<p>이런 양방향 데이터 흐름은 <strong>설계가 쉽고 간단하게 코드를 작성</strong>할 수 있는 장점이 있다. 다만, 어플리케이션의 규모가 커지면 데이터 흐름 파악이 힘들어지게 되고, <strong>디버깅이 어려워져서</strong> 많은 시간이 소비된다.</p>\n<p>이러한 MVC 디자인 패턴의 단점을 보안하기 위해 Facebook에서 개발한 새로운 디자인 패턴이 Flux이다.</p>\n<h3 id=\"2-flux란\" style=\"position:relative;\"><a href=\"#2-flux%EB%9E%80\" aria-label=\"2 flux란 permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Flux란?</h3>\n<p>Facebook에서 MVC 디자인 패턴의 단점을 보안하기 위해 개발한 웹 어플리케이션을 위한 디자인 패턴이다. <strong>단방향 데이터 흐름</strong>이라는 특징을 가지고 있다.</p>\n<p>작동되는 흐름은 다음과 같다.</p>\n<p><img src=\"https://images.velog.io/images/moon3356/post/f4fb01a1-c449-4741-a06b-45d40ce1947b/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-08-26%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%203.55.21.png\" alt=\"\"></p>\n<ol>\n<li>View에서 이벤트가 발생한다.</li>\n<li>액션 생성자는 개발자가 설정한 액션을 생성하고 dispatcher에 넘겨준다.</li>\n<li>dispatcher는 들어온 액션의 순서에 따라 스토어로 보낸다.</li>\n<li>액션을 받은 스토어는 액션에 맞게 상태를 변경한다.</li>\n<li>상태 변경이 완료되면 스토어는 자신을 구독하고 있는 컨트롤러 뷰에게 변경이 된 것을 알린다.</li>\n<li>상태가 변경된 것을 알게된 컨트롤러 뷰들은 변경된 상태를 스토어에게 요청을 보낸다.</li>\n<li>스토어가 새로운 상태를 넘겨주면, 컨트롤러 뷰는 자신 아래의 모든 뷰에게 새로운 상태를 렌더링하라고 알린다.</li>\n</ol>\n<p>위와 같은 과정으로 데이터들이 <strong>단방향</strong>으로 흐르게 된다. 따라서 데이터 변화를 MVC 패턴보다 <strong>훨씬 예측하기 쉽게 개발을 진행할 수 있다</strong>.</p>\n<h2 id=\"redux가-필요한-이유\" style=\"position:relative;\"><a href=\"#redux%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%9C-%EC%9D%B4%EC%9C%A0\" aria-label=\"redux가 필요한 이유 permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux가 필요한 이유</h2>\n<p><strong>컴포넌트가 적은 프로젝트라면</strong>, 부모 컴포넌트에 있는 state를 한두 번에 걸쳐 사용할 수 있다. 그러나, <strong>컴포넌트가 많은 프로젝트라면</strong> 부모 컴포넌트로부터 state를 받아오기까지 많은 컴포넌트를 거쳐 state를 받아와야해서 상태 관리의 복잡성이 커지게 된다. Redux를 사용하면 이 문제를 해결할 수 있다.</p>\n<p>Redux를 사용하여 특정한 공간에 state를 저장하면, 다이렉트로 데이터들을 받아올 수 있다.</p>\n<h2 id=\"redux에서-사용되는-키워드들의-특징\" style=\"position:relative;\"><a href=\"#redux%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94-%ED%82%A4%EC%9B%8C%EB%93%9C%EB%93%A4%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"redux에서 사용되는 키워드들의 특징 permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux에서 사용되는 키워드들의 특징</h2>\n<h3 id=\"1-action\" style=\"position:relative;\"><a href=\"#1-action\" aria-label=\"1 action permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Action</h3>\n<ul>\n<li>상태에 어떠한 변화가 필요하게 될 때, 액션을 발생시킨다.</li>\n<li>하나의 객체로 표현이 된다.</li>\n</ul>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"javascript\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{ </span><span class=\"mtk5 mtki\">//예시 코드</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  type: </span><span class=\"mtk6\">&quot;ORDER&quot;</span><span class=\"mtk1\">, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  drink: {menu: </span><span class=\"mtk6\">&quot;Americano&quot;</span><span class=\"mtk1\">, size:</span><span class=\"mtk6\">&quot;Grande&quot;</span><span class=\"mtk1\">, iced: </span><span class=\"mtk7\">false</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>액션 객체는 type을 필수적으로 가지고 있어야 하며, 그 외의 값들은 개발자 마음대로 가능하다.</p>\n<h3 id=\"2-action-creator\" style=\"position:relative;\"><a href=\"#2-action-creator\" aria-label=\"2 action creator permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Action Creator</h3>\n<ul>\n<li>액션을 만드는 함수이다.</li>\n<li>뷰에서 이벤트가 발생하여 액션을 생성할 때, 액션을 좀 더 편하게 생성하기 위해 사용된다.</li>\n</ul>\n<h3 id=\"3-store\" style=\"position:relative;\"><a href=\"#3-store\" aria-label=\"3 store permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Store</h3>\n<ul>\n<li>상태가 관리되는 오직 하나의 공간.</li>\n<li>Redux에서는 한 애플리케이션 당 하나의 store를 만들게 된다.</li>\n<li>store 안에는, 현재의 앱 상태와, reducer 함수가 들어가있고, 추가적으로 내장 함수들이 있다.</li>\n</ul>\n<h3 id=\"4-reducer\" style=\"position:relative;\"><a href=\"#4-reducer\" aria-label=\"4 reducer permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Reducer</h3>\n<ul>\n<li>변화를 일으키는 함수</li>\n<li>현재 State와 Action을 이용하여 새로운 state를 만들어냄</li>\n<li>Reducer에서는 전달받아온 Action 객체의 타입에 따라 다른 동작을 수행한다. 그에 따라서 새로운 State를 생성한다.</li>\n</ul>\n<h2 id=\"redux의-3가지-원칙\" style=\"position:relative;\"><a href=\"#redux%EC%9D%98-3%EA%B0%80%EC%A7%80-%EC%9B%90%EC%B9%99\" aria-label=\"redux의 3가지 원칙 permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux의 3가지 원칙</h2>\n<ul>\n<li><strong>Single source of truth</strong></li>\n</ul>\n<p>동일한 데이터는 항상 <strong>같은 곳</strong>에서 데이터를 가지고 온다.\n데이터를 저장하는 하나뿐인 스토어가 있다.</p>\n<ul>\n<li><strong>State is read-only</strong></li>\n</ul>\n<p>기존에는 setState를 사용하여 state 값을 변경해줬었다.\nRedux에서는 Action이라는 함수를 이용하여 state 값을 변경해준다.</p>\n<ul>\n<li><strong>Changes are made with pure functions</strong></li>\n</ul>\n<p>변경은 순수 함수로만 가능하다.</p>\n<h2 id=\"redux-vs-context-api\" style=\"position:relative;\"><a href=\"#redux-vs-context-api\" aria-label=\"redux vs context api permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux vs Context API</h2>\n<p>리덕스는 전역 상태를 관리할 때 굉장히 효과적이다. 물론 리덕스를 사용하는 것만이 유일한 해결책은 아니다. 리액트에서 제공하는 Context API를 사용하여도 전역 상태 관리를 할 수 있다. 다만 리덕스는 아래와 같은 장점들을 가지고 있다.</p>\n<h3 id=\"1-미들웨어\" style=\"position:relative;\"><a href=\"#1-%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4\" aria-label=\"1 미들웨어 permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 미들웨어</h3>\n<p>리덕스에는 미들웨어라는 개념이 존재한다. 미들웨어를 사용하면 액션 객체가 리듀서에서 처리되기 전에 우리가 원하는 작업들을 수행할 수 있다.</p>\n<p>미들웨어는 주로 비동기 작업을 처리할 때 많이 사용된다.</p>\n<h3 id=\"2-유용한-함수와-hooks\" style=\"position:relative;\"><a href=\"#2-%EC%9C%A0%EC%9A%A9%ED%95%9C-%ED%95%A8%EC%88%98%EC%99%80-hooks\" aria-label=\"2 유용한 함수와 hooks permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 유용한 함수와 hooks</h3>\n<p>useSelector, useDispatch, useStore와 같은 hooks들을 사용하여 손쉽게 상태를 조회하거나 액션을 디스패치 할 수 있는 장점이 있다.</p>\n<h3 id=\"3-하나의-커다란-상태\" style=\"position:relative;\"><a href=\"#3-%ED%95%98%EB%82%98%EC%9D%98-%EC%BB%A4%EB%8B%A4%EB%9E%80-%EC%83%81%ED%83%9C\" aria-label=\"3 하나의 커다란 상태 permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 하나의 커다란 상태</h3>\n<p>Context API를 사용해서 글로벌 상태를 관리할 때는 기능별로 context를 만들어서 사용하는 것이 일반적이다. 반면 리덕스에서는 모든 글로벌 상태를 하나의 상태 객체에 넣어서 사용하기 때문에 여러 context를 생성하는 수고로움을 덜 수 있다.</p>\n<hr>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reference</h2>\n<p><a href=\"https://react.vlpt.us/redux/\">벨로퍼트와 함께하는 모던 리액트</a>\n<a href=\"https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207\">A cartoon guide to Flux</a>\n<a href=\"https://medium.com/@rhodunda/mvc-design-pattern-fe76175a01de\">MVC design pattern</a></p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .one-dark-pro {\n    background-color: #282c34;\n    color: #abb2bf;\n  }\n  .one-dark-pro .mtki { font-style: italic; }\n  .one-dark-pro .mtk1 { color: #ABB2BF; }\n  .one-dark-pro .mtk5 { color: #7F848E; }\n  .one-dark-pro .mtk6 { color: #98C379; }\n  .one-dark-pro .mtk7 { color: #D19A66; }\n  .one-dark-pro .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>"}]}}}